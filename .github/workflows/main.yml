name: Spring Boot CI

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest


    steps:
    - uses: actions/checkout@v2


    - name: Display Environment Variables
      run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "TOKEN: ${{ secrets.GITHUB_TOKEN }}"
          echo "something83"
          echo "SHA: $GITHUB_SHA"
          echo "SHORT: ${{ github.sha_short }}"
          echo "SHORT from long: ${GITHUB_SHA::10}"


    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq


    - name: Extract values from JSON
      run: |
          echo "vmType=$(jq -r '.vmType' config.json)" >> $GITHUB_ENV
          echo "contractAddress=$(jq -r '.contractAddress' config.json)" >> $GITHUB_ENV
          echo "metricsAddress=$(jq -r '.metricsAddress' config.json)" >> $GITHUB_ENV
          echo "port=$(jq -r '.port' config.json)" >> $GITHUB_ENV
          



    - name: Use the JSON values
      run: |
          echo "Using vmType: $vmType"
          echo "Using contractAddress: $contractAddress"


    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin' # Temurin is the Eclipse Foundation's OpenJDK distribution

   
    - name: Grant execute permission for gradlew
      run: |
        echo "Before chmod on wrapper"
        chmod +x ./gradlew
        echo "After chmod on wrapper"


    # - name: Download dependencies
    #   run: |
    #     echo "Dowloading the dependencies...."
    #     ./gradlew --no-daemon --quiet dependencies
    #     echo "Dependencies downloaded."


    # - name: Fetch and build dependency hash map in JSON format
    #   run: |
    #     echo "Downloaded dependencies and their hashes:"
    #     files=$(find ~/.gradle/caches/modules-2/files-2.1 -type f -name '*.jar')
    #     echo "{" > deps_hashes.json
    #     echo -e "\t\"contractAddress\": \"${contractAddress}\"," >> deps_hashes.json
    #     echo -e "\t\"depsHashesMap\": {" >> deps_hashes.json
    #     for file in $files; do
    #       hash=$(sha256sum "$file" | cut -d " " -f1)
    #       filename=$(basename "$file")
    #       echo -e "\t\t\"$filename\": \"$hash\"," >> deps_hashes.json
    #     done
    #     # Remove the last comma and close the JSON array
    #     sed -i '$ s/,$//' deps_hashes.json
    #     echo -e "\t}" >> deps_hashes.json
    #     echo "}" >> deps_hashes.json


    # - name: Print contents of dependency hash map 
    #   run: |
    #     cat deps_hashes.json


    # - name: Make HTTP GET request with curl - to esm, for dependency check
    #   run: |
    #       echo 'starting curl'
    #       BASE_URL="https://63b5e9a76ada208d08eb733c6682f603.serveo.net/blockchain/dependency-check"
    #       PARAMS=""

    #       echo 'before actual curl'
    #       RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST -H "Content-Type: application/json" -d @deps_hashes.json "${BASE_URL}${PARAMS}")
    #       echo 'after actual curl'


    #       if [[ ${RESPONSE} -ge 400 ]]; then
    #         echo "HTTP error occurred: ${RESPONSE}"
    #         cat response.json
    #         exit 1  # Exit with a non-zero status to fail the CI/CD pipeline
    #       fi

    #       echo "Success: ${RESPONSE}"


    - name: Build with Gradle
      run: |
        echo "Starting the build process...."
        ./gradlew build -x test
        echo "Build process completed."


    # - name: Test with Gradle
    #   run: |
    #     echo "Starting the testing process"
    #     ./gradlew test
    #     echo "Testing process done."


    - name: Make HTTP GET request with curl - to esm, for deployment
      run: |
          echo 'entered depeloy step' 
          BASE_URL="https://1889abab34f31e3f24490834a109854d.serveo.net/deploy"
          PARAMS="?vmType=$vmType&repoUrl=https://github.com/$GITHUB_REPOSITORY.git&lastCommitHash=${GITHUB_SHA::10}&redeployment=false&metricsAddress=${metricsAddress}&port=${port}"

          echo 'right before curl'
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" "${BASE_URL}${PARAMS}")
          echo 'right after curl'

          if [[ ${RESPONSE} -ge 400 ]]; then
            echo "HTTP error occurred: ${RESPONSE}"
            cat response.json
            exit 1  # Exit with a non-zero status to fail the CI/CD pipeline
          fi

          echo "Success: ${RESPONSE}"
